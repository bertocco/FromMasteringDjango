Source:
"mastering django tutorial"
https://masteringdjango.com/django-tutorial-for-beginners/#lesson-4-your-first-django-app-not-a-poll-or-a-blog
Lessons from 4 to 9

Here my repo of code:


Here my notes:

mkdir ESCAPE-VM-worker-gui-root
cd ESCAPE-VM-worker-gui-root
python3 -m venv env
source env/bin/activate
pip3 install django
source env/bin/activate
django-admin startproject vmmanager .
django admin startapp pages
Aderro devi registrare l'app nel progetto:
aggiungi in vmmanager/settings.py in INSTALLED_APPS
'pages.apps.PagesConfig',
cosi` diventa:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pages.apps.PagesConfig',
]

Now:
python3 manage.py makemigrations pages   #generate the new migration
:nd then migrate
python3 manage.py migrate
Itsays "no migrations to apply.
 try to run the server and it goes:
python3 manage.py runserver
Watching for file changes with StatReloader
Performing system checks...

System check identified no issues (0 silenced).
September 07, 2022 - 16:53:08
Django version 4.1.1, using settings 'vmmanager.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.

Create the app VIEW. Open ./pages/views.py
and write:
from django.shortcuts import render

# Create your views here.
from django.http import HttpResponse
def index(request):

    return HttpResponse("<h1>The home page.</h1>")

The return an example of function based view.
Now, to show it as home of the site, you have to
CONFIGURE the URL 
You configure the urls using the function
path(route, view)
example:
path(mypage, views.myview)

For first,you configure the app url.
In pages/urls.py write:
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name="index"),
]

Now, you have to crete a connection in the project urls.
In vmmanager/urls.py write

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('pages.urls')),
    ]

Now, CREATE the MODEL. In pages/models.py

from django.db import models

# Create your models here.

class Page(models.Model):
    title = models.CharField(max_length=60)
    permalink = models.CharField(max_length=12, unique=True)
    update_date = models.DateTimeField('Last updated')
    bodytext = TextField('Page Content', blank=True)

Now, registerthe model with the admin
in pages/admin.py write

from django.contrib import admin
from .models import Page

# Register your models here.

admin.site.register(Page)

Now, the migration has to be done, so django can add the model tothe database.
python3 manage.py makemigrations pages
python3 manage.py migrate

ADMINISTRATION INTERFACE
Create an administration user:
python3 manage.py createsuperuser --email admin@example.com --username admin
Password123
Now,you can connect to the administration page:
127.0.0.1:8000/admin
log-in and add an example page 
Inthe listof added pages they have not a friendly name.
Tofix the name. go in pages/models.py and modify it as follow:
class Page(models.Model):
    title = models.CharField(max_length=60)
    permalink = models.CharField(max_length=12, unique=True)
    update_date = models.DateTimeField('Last updated')
    bodytext = TextField('Page Content', blank=True)
 
    def __str__(self):
        return self.title 

If you want modify the administrationpage, for example, listing
in the title alphabetical order and displaying the last update date, 
goin pages/admin.py

vai in pages/admin.py
and write:

class PageAdmin(admin.ModelAdmin):
    list_display =('title', 'update_date')
    ordering = ('title')
    search_fields = ('title',)

admin.site.register(Page, PageAdmin)

The added pages are accessible from:
<link_del_sito>/permalink
Example:
https://127.0.0.1/
https://127.0.0.1/about
https://127.0.0.1/service

CONFIGURE the TEMPLATES (for the DB data rendering)
in vmmanager/settings.py (in the project)
you find the list TEMPLATES containing a dictionary

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

DIRS is the list of folders containing templates, by default it is empty.
the paths can be absolute or relative.
APP_DIRS is True by default. If True, django searches a folder 'templates' in each app
If you have template files in other locations, you must these locations in APP_DIRS.
In our example, we put templates alsoin the root of the project, so:

        'DIRS': [BASE_DIR / vmmanager/templates],

Create:
mkdir vmmanager/templates

Static files are saved in a folder named 'static' in the project, to have a faster rendering.
This path is defined in settings.py

STATIC_URL = 'static/'
devi aggiungere
%STATICFILES_DIR = [BASE_DIR / 'vmmanager/static']

Create
mkdir vmmanager/static

Now wecreatethe site templates. The files are:
base.html
main.css
logo.jpg
top_banner.png

vmmanager/template/base.html
{% load static %}
<html>
<meta charset="utf-8">
<title>Untitled document</tile>
<link href="{ static 'main.css' %}" rel="stylesheet" type="text/css">
</head>
<body>
<div id="wrapper">
  <header id="header">
    <div id="logo"><img src="{% static 'logo.jpg' %}" alt="" /></div>
    <div id="topbanner"><img src="{% static 'top_banner.png' %}" width="800" height="200" alt="" /></div>
  </header>   
  <aside id="leftsidebar">
    <nav id="nav">
    <ul><li>Menu1</li><li>Menu2</li><li>Menu 3</li></ul>
    </nav>
  </aside>
    <section id="main">
      <h1>Welcome!</h1>
      <p>This is the site template</p>
    </section>
    <footer id="footer">Copyright &copy; 2017 Meandco Web Design</footer>
</div>
<body>
</html>

Now the viewhas tobe modified to load the template:
from django.shortcuts import render

# Create your views here.
from django.http import HttpResponse
def index(request):
    # Prima della lezione 6 (=intro dei template)
    #return HttpResponse("<h1>The home page.</h1>")
    # Lezione 6: uso dei template
    return render(request, 'base.html')

When django uses the template, it must:
- create the template
- create a context(it is a dictionary cntaining allthe variables 
to exchange)
- return the response
The rendering is a shortcut because all is done in a function.

Now we introduce the template inheritance (block content)
I have created a template in the app pages
ESCAPE-VM-worker-gui-root/pages/templates/pages/page.html
{% extends "base.html" %}

{% block content %}
   <h1>Welcome!</h1>
   <p>This is the internal page</p>
{% endblock content %}

The page structure is:
[common content block]
[child content block]
[common content block]

The block child has the form:
{% block content %}
   <!-- Replaceable content -->
   <p>This is the internal page</p>
{% endblock content %}

Imodify the view to show the right page:
from django.shortcuts import render

# Create your views here.
from django.http import HttpResponse
def index(request):
    # Prima della lezione 6 (=intro dei template)
    #return HttpResponse("<h1>The home page.</h1>")
    # Lezione 6: uso dei template
    #return render(request, 'base.html')
    # uso ereditarieta nei template
    return render(request, 'pages/page.html')

iAs long as in vmmanager/settings.py I have 
'APP_DIRS': True,
in TEMPLATES, django searches a subfolder 'templates' in each app,so,
the view finds the file
pages/templates/pages/page.html

ADD DYNAMIC BEHAVIOUR
In pages/urls.py we add the links, not static, but depending by the 
selected page in the menu, i.e. by the value i 'permalink' in the file
pages/models.py
The file pages/urls.py becomes:

from django.urls import path
from . import views

urlpatterns = [
    #path('', views.index, name="index"),
    path('', views.index, {'pagename' : ''}, name='home'),
    path('<str:pagename>', views.index, name='index'),
]

The third row gets what is included in <> and send it to the views as parameter
with name 'pagename' and type string.
The second row manages the empty string, soit manages the call:
https://127.0.0.1:8000/
The third row manages the call
https://127.0.0.1:8000/services
and pass to view the parameter pagename=services

Now we re-write the view to be able to get parameters from the URL
and we see how the model gets data from the DB.

We can use the interactive shell to study the commands to use:
python3 manage.py shell
Import the model:
from pages.models import Page
We get the page object with '/', i.e. the home:
pg=Page.objects.get(permalink = '/')
Now we have the object so we can get his attributes:
pg.title
pg.update_date
pg.bodytext

Now we are ready to modify the view:
from django.shortcuts import render

from . models import Page

def index(request, pagename):
    pagename = '/' + pagename
    pg = Page.objects.get(permalink=pagename)
    context = {
        'title'=pg.title,
        'content=':pg.bodytext,
        'last_update':pg.update_date,
    }
    # assert False
    return render(request, 'pages/page.html', context)

The row
pagename = '/' + pagename
says that the content is related to the current page, notto the root.
In django, context is the dictionary used to pass the parameters to the
template which will use them to perform the dynamic page rendering.

Now we go to put the right title to each page:
vmmanager/templates/base.html
{% load static %}
<html>
<meta charset="utf-8">
<title>
        {% block title %}
        Untitled document
        {% endblock title %}
</title>
<link href="{% static 'main.css' %}" rel="stylesheet" type="text/css">
</head>
<body>
<div id="wrapper">
  <header id="header">
    <div id="logo"><img src="{% static 'logo.png' %}" alt="" /></div>
    <div id="topbanner"><img src="{% static 'top_banner.jpg' %}" width="800" height="200" alt="" /></div>
  </header>
  <aside id="leftsidebar">
    <nav id="nav">
    <ul><li>Menu1</li><li>Menu2</li><li>Menu 3</li></ul>
    </nav>
  </aside>
    <section id="main">
      {% block content %}
      <h1>Welcome!</h1>
      <p>This is the site template</p>
      {% endblock content %}
    </section>
    <footer id="footer">Copyright &copy; 2017 Meandco Web Design</footer>
</div>
<body>
</html>

We read the fields from the database:

pages/templates/pages/page.html
{% extends "base.html" %}

{% block title %}
    {{ title }}
{% endblock title %}

{% block content %}
{% autoescape off %}
    {{ content }}
{% endautoescape %}

<p>
 Page last updated: {{last_updated| date:'D d F Y' }}
</p>

{% endblock content %}


Now, we implement the MENU.
Before we try the commands in the interactive shell:
$ python manage.py shell
Python 3.8.10 (default, Jun 22 2022, 20:18:18) 
[GCC 9.4.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from pages.models import Page
>>> page_list = Page.objects.all()
>>> for pg in page_list:
...     print(pg.permalink, pg.title)
... 
/ Home
/about About
/services Services

Now we modify the template to add the menu:

In vmmanager (.e. in the project):
cat vmmanager/templates/base.html
{% load static %}
<html>
<meta charset="utf-8">
<title>
        {% block title %}
	Untitled document
	{% endblock title %}
</title>
<link href="{% static 'main.css' %}" rel="stylesheet" type="text/css">
</head>
<body>
<div id="wrapper">
  <header id="header">
    <div id="logo"><img src="{% static 'logo.png' %}" alt="" /></div>
    <div id="topbanner"><img src="{% static 'top_banner.jpg' %}" width="800" height="200" alt="" /></div>
  </header>   
  <aside id="leftsidebar">
    <nav id="nav">
        {% block sidenav %}
    <ul><li>Menu1</li><li>Menu2</li><li>Menu 3</li></ul>
        {% endblock sidenav %}
    </nav>
  </aside>
    <section id="main">
      {% block content %}
      <h1>Welcome!</h1>
      <p>This is the site template</p>
      {% endblock content %}
    </section>
    <footer id="footer">Copyright &copy; 2017 Meandco Web Design</footer>
</div>
<body>
</html>


 cat pages/templates/pages/page.html
{% extends "base.html" %}

{% block title %}
    {{ title }}
{% endblock title %}

{% block sidenav %}
  {% for page in page_list %}
     <li>
	     <a href="{{ page.permalink }}">{{ page.title }}</a>
     </li>
  {% endfor %}
{% endblock sidenav %}

{% block content %}
{% autoescape off %}
    {{ content }}
{% endautoescape %}

<p>
 Page last updated: {{last_update| date:'D d F Y' }}
</p>

{% endblock content %}


How to do the FORMis: the form class


testform.html

<!doctype html>
<html>
    <body>
        <form>
            <p>First name:  <input type="text" name="firstname"</p>
            <p>Last name:  <input type="text" name="lastname"</p>
            <p> <input type="submit" value="submit"</p>
        </form>
    </body>
</html>

Try django shell:
python3 manage.py shell
write:
from django import forms
class SimpleForm(forms.Form):
    firstname = forms.CharField(max_length=100)
    lastname = forms.CharField(max_length=100)
f=SimpleForm()
print(f.as_p())
# da qui ricavi il blocco interno in testform1.html
print(f.as_ul())
print(f.as_table())

To see how the validation works:
f = SimpleForm()
f.is_valid()
f.errors
print(f.as_p()
# here I obtain the internal block in testform2.html
copy the result in the previous form and obtain testform2.html

The example files are: 
testform.html   simple form
testform1.html   partial error management
testform2.html   with error management


Now I create the file forms.py 
from django import forms

class ContactForm(forms.form):

    yourname = models.CharField(max_length=100, label="Your name")
    email = models.EmailField(required=False, label="Your email address")
    subject = models.CharField(max_length=100, label="subject")
    message = models.CharField(widget=forms.Textarea)

At this stage I need:
a) A URL pattern for the form
b) Add the navigation to the site template
c) create the form template
d) create and test the form view

a) Create the URL
Modify urls.py in pages

from django.urls import path
from . import views

urlpatterns = [
    # path('', view.index, name='index')
    path('', view.index, {'pagename':''}, name='home'),
    path('contact', views.contact, name='contact'),
    path('<str:pagename>', views.index, name='index'),
]

Add the reference to the contact page in the menu:
add the row below to vmmanager/templates/base.html:
	<li><a href="/contact">Contact us</a></li>

the file is:
cat vmmanager/templates/base.html
{% load static %}
<html>
<meta charset="utf-8">
<title>
        {% block title %}
	Untitled document
	{% endblock title %}
</title>
<link href="{% static 'main.css' %}" rel="stylesheet" type="text/css">
</head>
<body>
<div id="wrapper">
  <header id="header">
    <div id="logo"><img src="{% static 'logo.png' %}" alt="" /></div>
    <div id="topbanner"><img src="{% static 'top_banner.jpg' %}" width="800" height="200" alt="" /></div>
  </header>   
  <aside id="leftsidebar">
    <nav id="nav">
        {% block sidenav %}
    <ul><li>Menu1</li><li>Menu2</li><li>Menu 3</li></ul>
        {% endblock sidenav %}
	<li><a href="/contact">Contact us</a></li>
    </nav>
  </aside>
    <section id="main">
      {% block content %}
      <h1>Welcome!</h1>
      <p>This is the site template</p>
      {% endblock content %}
    </section>
    <footer id="footer">Copyright &copy; 2017 Meandco Web Design</footer>
</div>
<body>
</html>

I must create the template for the form:
file pages/template/pages/form.html
<html>
    <head>
        <title>Benvenuto</title>
    </head>
    <body>

{% block title %}Contact us{% endblock title %}

{% block content %}

{% if submitted %}
        <p class= "Success">
          Your message was submittad successfully.
        </p>

{% else %}
    <form action="" method="post" novalidate>
    <table>
         {{ form.as_table }}
         <tr>
             <td>&nbsp;</td>
             <td><input type="submit" value="Submit"></td>
         </tr>
     </table>

 {% csrf_token %}

{% endif %}

{% endblock content %}

    </body>
</html>


Now the contact view must be added in pages/view.py adding the
following code: 

def VMCreator(request):
    submitted =False
    
    if request.method == 'POST':
        form = VMCreatorForm(request.POST)
        if form.is_valid():
            cd = form.cleaned_data
            # assert False
            return HttpResponseRedirect('/createvm?submitted=True')
    else:           
        form = VMCreatorForm()
        if 'submitted' in request.GET:
            submitted = True
            
    return renderer(request, 'vm_creator_form.html', {'form': form, 'page.list': Page.objects.all(), 'submitted': submitted})


FORM: save and retrieve data
We create an app to save quotes.
Steps:
Create the app quotes
Create the model Quotes
Add the Quote model to the admin
To create
form
view 
template
so the user can request a quote through the web site

We create the app quotes. In the projact root:
python3 manage.py createapp quotes
at the same level of the folder pages we create an 'upload' where upload files

We add the app to the site configuration. In vmmanager/setting.py
 in dd it in INSTALLED_APP:
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pages.apps.PagesConfig',
    'quotes.apps.QuotesConfig',
]

Now we create the model for Quotes:
quotes/models.py
 cat quotes/models.py 
from django.db import models

# Create your models here.
from django.contrib.auth.models import User

STATUS_CHOICES = (
    ('NEW', 'New Site'),
    ('EX', 'Existing Site'),
)

PRIORITY_CHOICES = (
    ('U', 'Urgent, 1 week or less'),
    ('N', 'Normal, 2 to 4 weeks'),
    ('L', 'Low, Still Researching'),
)

class Quote(models.Model):
    name = models.CharField(max_length=100)
    position = models.CharField(max_length=60, blank=True)
    company = models.CharField(max_length=60, blank=True)
    address = models.CharField(max_length=60, blank=True)
    phone = models.CharField(max_length=30, blank=True)
    email = models.EmailField()
    web = models.URLField(blank=True)
    description = models.TextField()
    sitestatus = models.CharField(max_length=20, choices=STATUS_CHOICES)
    priority = models.CharField(max_length=40, choices=PRIORITY_CHOICES)
    jobfile = models.FileField(upload_to='uploads/', blank=True)
    submitted = models.DateField(auto_now_add=True)
    quotedate = models.DateField(blank=True, null=True)
    quoteprice = models.DecimalField(decimal_places=2,max_digits=7, blank=True, default=0)
    username = models.ForeignKey(User, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.id)

Adesso registriamo il modello nel database (creiamo la tabella):
python3 manage.py check # per controllare che tutto vada bene
python3 manage.py makemigrations # per preparare la migrazione
python3 manage.py migrate

Aggiungiamo il modello Quote all'admin:
 cat quotes/admin.py 
from django.contrib import admin
from .models import Quote

# Register your models here.

admin.site.register(Quote)

Questo serve a far comparire il tuo modello Quote nell'interfaccia
di amministrazione,così cipuoi lavorare (aggiungere record)
 cat quotes/admin.py 
from django.contrib import admin
from .models import Quote

# Register your models here.

admin.site.register(Quote)

Lesso 5 and 4th block of lesson 9 to learn how to modify the 
administration interface.


ADD THE FORM TO THE FRONTEND
You must 
1_ Create the form
2_ create the view to manage the form (businness logic)
3_ create the template  to render the for
4_ create the the URLs configurations

Create the form:
cat quotes/forms.py
from djangoimport forms
from forms import ModelForm
from .models import Quote

class QuoteForm(ModelForm):
    
    required_css_class = 'required'

    class Meta:
        Model = Quote
        fields = [
                 'name', 'position', 'company', 'address',
                 'phone', 'email', 'web', 'description',
                 'sitestatus', 'priority', 'jobfile'
                 ]

Create the view:

cat quotes/views.py 
from django.shortcuts import render
from django.http import HttpResponseRedirect

# Create your views here.

def quote_req(request):
    submitted =False

    if request.method == 'POST':
        form = QuoteForm(request.POST, request.FILES)
        if form.is_valid():
            form.save() 
            # assert False
            return HttpResponseRedirect('/quote?submitted=True')
    else:
        form = QuoteForm()
        if 'submitted' in request.GET:
            submitted = True

    return render(request, 'quotes/quote.html', {'form': form, 'page_list': Page.objects.all(), 'submitted': submitted})

Create the template quotes/templates/quotes/quote.html:

{% extends "base.html" %}

{% block title %}Quote request{% endblock title %}

{% block sidenav %}
  {% for page in page_list %}
    <li><a href="{{ page.permalink }}">{{ page.title }}</a></li>
  {% endfor %}  
{% endblock sidenav %}

{% block content %}

<h1>Quote request</h1>

{% if submitted %}
        <p class="Success">
          Your quote was submittad successfully. Thank you.
        </p>

{% else %}

    <form action="" enctype="multipart/form-data" method="post" novalidate>
    <table>
         {{ form.as_table }}
         <tr>
             <td>&nbsp;</td>
             <td><input type="submit" value="Submit"></td>
         </tr>
     </table>
 {% csrf_token %}
    </form>

{% endif %}

{% endblock content %}

Add urls configuration and site links.

cat vmmanager/urls.py 

from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('admin/', admin.site.urls),
    path('quote', include('quotes.urls')),
    path('', include('pages.urls')),
    ]

cat quotes/urls.py
from django.urls import path

from . import views

urlpatterns = [
               path('', views.quote_req, name='quote-request'),
              ]

Add the link in vmmanager/base.html

cat vmmanager/templates/base.html
{% load static %}
<html>
<meta charset="utf-8">
<title>
        {% block title %}
	Untitled document
	{% endblock title %}
</title>
<link href="{% static 'main.css' %}" rel="stylesheet" type="text/css">
</head>
<body>
<div id="wrapper">
  <header id="header">
    <div id="logo"><img src="{% static 'logo.png' %}" alt="" /></div>
    <div id="topbanner"><img src="{% static 'top_banner.jpg' %}" width="800" height="200" alt="" /></div>
  </header>   
  <aside id="leftsidebar">
    <nav id="nav">
        {% block sidenav %}
    <ul><li>Menu1</li><li>Menu2</li><li>Menu 3</li></ul>
        {% endblock sidenav %}
	<li><a href="/contact">Contact us</a></li>
	<li><a href="/quote">Get a Quote</a></li>   <!-- QUI: aggiunto link -->
    </nav>
  </aside>
    <section id="main">
      {% block content %}
      <h1>Welcome!</h1>
      <p>This is the site template</p>
      {% endblock content %}
    </section>
    <footer id="footer">Copyright &copy; 2017 Meandco Web Design</footer>
</div>
<body>
</html>


